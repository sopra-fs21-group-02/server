buildscript {
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.1.0"
    }
}
plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "3.1.1"
    id "org.openapi.generator" version "5.1.0"
}

apply plugin: 'org.openapi.generator'

group 'ch.uzh.ifi.hase'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(15))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    google()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs21.OpenAPI2SpringBoot')
}

dependencies {
    compile 'com.google.api-client:google-api-client:1.31.3'
    compile 'com.google.http-client:google-http-client-gson:1.22.0'

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql:42.1.1'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

//Dependencies introduced by the OpenAPI Generator plugin
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'javax.validation:validation-api'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = file("$buildDir/jacocoReportDir")
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "sopra-fs21-group-02_server"
        property "sonar.organization", "sopra-fs21-group-02"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", ["$buildDir/jacocoReportDir/test/jacocoTestReport.xml"]
        property "sonar.cpd.exclusions", "**/entity/*.java,**/rest/dto/*.java"
    }
}

project.tasks["sonarqube"].dependsOn {
    test
}

defaultTasks 'bootJar', 'build'


task generateSpringSources(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "spring"
    inputSpec = "$rootDir/api/openapi.yaml".toString()
    outputDir = "$rootDir".toString()
    invokerPackage = "ch.uzh.ifi.hase.soprafs21"
    apiPackage = "ch.uzh.ifi.hase.soprafs21.controller"
    modelPackage = "ch.uzh.ifi.hase.soprafs21.rest.dto"
    modelNameSuffix = "Dto"
    configOptions = [
            dateLibrary: "java8"
    ]
}
task generateClientSources(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "javascript"
    inputSpec = "$rootDir/api/openapi.yaml".toString()
    outputDir = "$buildDir/generated/client".toString()
}
